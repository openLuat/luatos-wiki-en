按行读取
Read by row
本库有专属demo，[点此链接查看io的demo例子
This library has its own demo,[click this link to view io demo examples
本页文档由[这个文件](https://gitee.com/openLuat/LuatOS/tree/master/luat/../lua/src/liolib.c)自动生成。如有错误，请提交issue或帮忙修改后pr，谢谢
This page document is automatically generated by [this file](https://gitee.com/openLuat/LuatOS/tree/master/luat/../lua/src/liolib.c). If there is any error, please submit issue or help modify pr, thank you
参数
Parameters
操作(扩展
action (extended
成功返回true, 否则返回
Returns true on success, otherwise
成功返回true,否则返回
Returns true on success, otherwise
成功与否
Success or not
传入值类型|解释
Incoming Value Type | Explanation
创建文件夹
Create Folder
存在返回true,否则返回
Existence returns true, otherwise
底层返回值
underlying return value
读取模式, 默认
Read mode, default
读取文件并填充到zbuff内,但不移动指针位置
Read the file and fill it into the zbuff, but do not move the pointer position
读取长度,默认整个文件
Read length, default entire file
读取整个文件,请注意内存消耗
Read the entire file, note the memory consumption
读取指定字节数,如果数据不足,就只返回实际长度的数据
Read the specified number of bytes, and if the data is insufficient, only the actual length of the data is returned.
读取abc.txt, 先跳过128字节, 然后读取512字节数据
Read abc.txt, skip 128 bytes first, then read 512 bytes of data
读写默认,打开文件
Read-write default, open file
返回实际读取到的长度，如果小于0也说明是读取失败了
Returns the length actually read. If it is less than 0, the read failed.
返回值
Return Value
返回值类型|解释
return value type | explanation
格式化文件系统,需指定挂载点
To format a file system, you must specify a mount point.
挂载点
Mount Point
挂载点列表
Mount point list
获取文件大小
Get File Size
将数据写入文件
Write data to a file
例子
Examples
列出目录下的文件
List files in a directory
列出所有挂载点
List all mount points
模块是lua原生模块,LuatOS增加了一些
module is native to lua, luatOS adds some
判断文件是否存在
Determine whether the file exists
偏移量, 默认0, 当目录文件很多时分页查询用
Offset, default 0, used for paging queries when there are many directory files.
起始位置,默认
starting position, default
请配合os模块一起使用
please use with OS module
全部读取
Read All
若文件打开成功, fd不为nil,否则就是失败了
If the file is opened successfully, fd is not nil, otherwise it is a failure.
删除文件夹
Delete Folder
实体
Entity
示例
Example
数据
Data
数据写入, 仅w或a模式可调用
data writing, only w or a mode can be called
数据需要是字符串, lua的字符串是带长度的,可以包含任何二进制数据
The data needs to be a string. Lua's string has a length and can contain any binary data.
文件路径
File Path
文件数据,若文件不存在会返回
File data, if the file does not exist will be returned
无
None
写入的位置,默认是
The location to write to, the default is
写入的长度,默认是zbuff的len减去
The written length, which is minus the len of zbuff by default.
写入文件,且截断为0字节
Write to file and truncate to 0 bytes
需要建立的目录路径
The directory path that needs to be created
需要枚举的目录路径
The directory path that needs to be enumerated
需要移除的目录路径
Directory path to remove
移动句柄,反向绝对坐标,从文件结尾往文件头部算
Move the handle, reverse the absolute coordinates, from the end of the file to the head of the file.
移动句柄,绝对坐标
move handle, absolute coordinates
移动句柄,相对坐标
Move handle, relative coordinates
已适配
Adapted
以下是写入
The following is written
执行完操作后,一定要关掉文件
After performing the operation, be sure to close the file.
只读模式, 打开文件
read-only mode, opening files
注意, 刷机时所添加的文件, 均在 /luadb 目录下, 只读
Note that the files added during the refresh are all in the/luadb directory and read-only
注意: offset和len参数是 2023.6.6添加的
Note: The offset and len parameters were added in 2023.6.6
追加模式
Append mode
最大长度, 默认10, 最高
Maximum length, default 10, maximum