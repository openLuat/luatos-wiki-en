与最上边的距离，范围是0~高度
Distance from the top, in the range of 0 ~ height
与最左边的距离，范围是0~宽度
The distance from the leftmost, the range is 0 ~ width
从位置1开始删除4个字节数据
Delete 4 bytes of data from position 1
从位置used-1开始删除4个字节数据，但是这肯定会超过used，所以del_len会调整为1，实际上就是删掉了最后一个字节
Delete 4 bytes of data from position used-1, but this will definitely exceed used, so the del_len will be adjusted to 1, which is actually deleting the last byte.
以下标形式进行数据读写（与当前指针位置无关；执行后指针位置不变
Read and write data in the form of following mark (regardless of the current pointer position; the pointer position will not change after execution
以头为基点
Based on head
以当前位置为基点
Base on current position
以末尾为基点
Base Point at End
传入值类型|解释
Incoming Value Type | Explanation
传入的数据，可以为多个数据
Incoming data, which can be multiple data
例子
Examples
偏移长度
Offset length
全部初始化为
Initialize all
内存数据操作库
Memory Data Manipulation Library
写入buff的数据，string或zbuff者时为一个参数，number时可为多个参数
The data written to buff is one parameter when string or zbuff is used, and multiple parameters when number is used.
写入buff的数据，string时为一个参数，number时可为多个参数
The data written to buff is one parameter when string is used and multiple parameters when number is used.
写入buff的起始位置，如果不为数字，则为buff的used，如果小于0，则从used往前数
Write the starting position of buff, if it is not a number, it is used of buff, if it is less than 0, it is counted forward from used
写入一个指定类型的数据（从当前指针位置开始；执行后指针会向后移动
Writes data of a specified type (starting from the current pointer position; the pointer will move backward after execution
写入数据, 指针相应地往后移动，返回写入的数据长度
Write data, the pointer moves back accordingly to return the length of the written data.
写数据（从当前指针位置开始；执行后指针会向后移动
Write data (starting from the current pointer position; the pointer will move backward after execution
创建
Create
创建，并填充一个已有字符串的内容
Create and populate the contents of an existing string.
创建framebuff用的
Create framebuff
创建一个128*160的
Create a 128*160
创建一个128*160的framebuff，初始状态红色
Create a 128*160 framebuff with an initial state of red
创建一个初值全为0x33的内存区域
Create a memory area with all initial values of 0x 33
删除zbuff 0~used范围内的一段数据，注意只是改变了used的值，并不是真的在ram里去清除掉数据
Delete a piece of data in the range of zbuff 0 to used, note that only the value of used is changed, not really clear the data in ram.
动态写数据，类似于memcpy效果，当原有空间不足时动态扩大空间
Dynamic data writing, similar to the memcpy effect, when the original space is insufficient, dynamic expansion of space
参数
Parameters
取出已使用的部分, 与buff:query()一样
Take out the used part, just like buff:query()
取出整个zbuff的数据
Take out the entire zbuff data
可选，圆的颜色，默认为
Optional, the color of the circle, the default is
可选，开始位置，默认为
Optional, starting position, default is
可选，是否在内部填充，默认
Optional, whether to fill inside, default
可选，比较的对象的开始位置，默认为
Optional, the starting position of the compared object, the default is
可选，长度，默认为全部空间，如果超出范围了，会自动截断
Optional, length, default is all space, if out of range, will be automatically truncated
可选，颜色，默认为
Optional, color, the default is
可选，默认为0。要设置为的值
Optional, the default is 0. value to set
可选，默认为0。要设置为的值，不会改变buff指针位置
Optional, the default is 0. value to be set to, does not change the buff pointer position
可选参数，number时为填充数据，string时为填充字符串
Optional parameter, filled with data for number and filled with string for string
可选参数，内存类型，可选：zbuff.HEAP_AUTO(自动申请,如存在psram则在psram进行申请,如不存在或失败则在sram进行申请,默认) zbuff.HEAP_SRAM(内部sram) zbuff.HEAP_PSRAM(外部psram) 注意:此项与硬件支持有关
Optional parameters, memory type, optional: zbuff.HEAP_AUTO (automatic application, if psram exists, apply in psram; if psram does not exist or fails, apply in sram, default) zbuff.HEAP_SRAM (internal sram) zbuff.HEAP_PSRAM (external psram) Note: This item is related to hardware support
可选参数，内存类型，可选：zbuff.SRAM(内部sram,默认) zbuff.PSRAM(外部psram) 注意:此项与硬件支持有关
Optional parameter, memory type, optional: zbuff.SRAM (internal sram, default) zbuff.PSRAM (external psram) Note: This item is related to hardware support
可选参数，填充数据
optional parameters, populating data
后面数据的格式（符号含义见下面的例子
The format of the following data (see the following example for the meaning of symbols
圆心**与最上边的距离，范围是0~高度
The distance between the center of the circle **and the top edge, ranging from 0 to height
圆心**与最左边的距离，范围是0~宽度
The distance between the center of the circle **and the leftmost, ranging from 0 to width
圆的半径
radius of circle
在psram申请
Apply in PSRAM
在sram申请
Apply at SRAM
基点，默认zbuff.SEEK_SET。zbuff.SEEK_SET: 基点为 0 （文件开头），zbuff.SEEK_CUR: 基点为当前位置，zbuff.SEEK_END: 基点为文件尾
Base point, default zbuff.SEEK_SET. Zbuff. SEEK_SET: base point is 0 (start of file),zbuff.SEEK_CUR: base point is current position, zbuff.SEEK_END: base point is end of file
大端
big end
如果全部成功读取，cnt就是
If all are read successfully, cnt is
字节数
Bytes
宽度、高度、色位深度
Width, height, color position depth
对象，如果创建失败会返回
object, which returns if the creation fails.
对象的长度
The length of the object
将一系列数据按照格式字符读取出来（从当前指针位置开始；执行后指针会向后移动
Read a series of data according to format characters (starting from the current pointer position; the pointer will move backward after execution
将一系列数据按照格式字符转化，并写入（从当前指针位置开始；执行后指针会向后移动
Convert a series of data according to format characters and write (starting from the current pointer position; the pointer will move backward after execution
小端
Small end
已适配
Adapted
常量
Constant
常量|类型|解释
constant | type | explanation
待写入的数据
Data to be written
成功写入的数据长度
Length of data successfully written
成功写入的长度
Length of successful write
成功读取的数据字节长度
Length in bytes of data successfully read
把光标设置到指定位置
Set the cursor to the specified position
按数值写入多个字节数据
Write multiple bytes of data by value
按格式写入几个数据
Write several data by format
按格式读出来的数据
Data read out by format
按格式读取几个数据
Read several data by format
按起始位置和长度0~used范围内取出数据，如果是1,2,4,8字节，根据后续参数转换成浮点或者整形
According to the starting position and length 0 ~ used range to take out the data, if it is 1,2,4,8 bytes, according to the subsequent parameters to convert to floating point or shaping
按起始位置和长度取出数据（与当前指针位置无关；执行后指针位置不变
Take out the data according to the starting position and length (regardless of the current pointer position; the pointer position remains unchanged after execution
数据成功写入的长度
Length of data successfully written
数据的格式（符号含义见上面pack接口的例子
The format of the data (see the example of the pack interface above for the meaning of the symbol.
数据的起始位置（起始位置为
The starting position of the data (the starting position is
数据的起始位置（起始位置为0）,默认值也是
The starting position of the data (starting position is 0), and the default value is also
数据的长度
Length of data
数据的长度,默认是全部数据
The length of the data. The default value is all data.
新空间大小
New Space Size
无
None
是否是大端格式，如果为nil，则不会转换，直接字节流输出
Whether it is a big-endian format. If it is nil, it will not be converted and the byte stream will be output directly.
是否是有符号的，默认为
Is signed, the default is
是否是浮点型，默认为
Whether it is a floating point type, the default is
有效数据量大小
Effective data size
本库有专属demo，[点此链接查看zbuff的demo例子
This library has its own demo,[click this link to view zbuff's demo example
本库还有视频教程，[点此链接查看
There are also video tutorials in this library, [click this link to view
本页文档由[这个文件](https://gitee.com/openLuat/LuatOS/tree/master/luat/modules/luat_lib_zbuff.c)自动生成。如有错误，请提交issue或帮忙修改后pr，谢谢
This page document is automatically generated by [this file](https://gitee.com/openLuat/LuatOS/tree/master/luat/modules/luat_lib_zbuff.c). If there is any error, please submit issue or help modify pr, thank you
比较的对象
Object of Comparison
比较长度
Comparison Length
注释|写入类型可为
Comment | Write type can be
注释|读取类型可为
Comment | Read type can be
清空数据（与当前指针位置无关；执行后指针位置不变
Empty data (regardless of current pointer position; pointer position unchanged after execution
画一个圆形（与当前指针位置无关；执行后指针位置不变
Draw a circle (regardless of the current pointer position; the pointer position does not change after execution
画一个矩形（与当前指针位置无关；执行后指针位置不变
Draw a rectangle (regardless of the current pointer position; the pointer position does not change after execution
画一条线（与当前指针位置无关；执行后指针位置不变
Draw a line (regardless of the current pointer position; the pointer position does not change after execution
画成功会返回
Painting success will return
的初始颜色
The initial color
的宽度
The width
的类似于memcmp操作，类似于
is similar to the memcmp operation, similar
的类似于memset操作，类似于memset(&buff[start], num, len)，当然有ram越界保护，会对len有一定的限制
similar to memset operation, similar to memset(& buff[start], num, len), of course there is ram out-of-bounds protection, will have a certain limit on len
的色位深度
The color depth
的高度
The height
相等，false不相等
Equal, false not equal
相等返回0，不相等返回第一个不相等位置的序号
Equal returns 0, unequal returns the ordinal number of the first unequal position
空白的
Blank
第几个数据，以0开始的下标（C标准
What data, subscript starting with 0 (C standard
等同于
Equivalent
等用于
etc. are used
类file的读写操作
Read and write operations of class file
类似于
Similar
类似于memcpy(&buff[0], "123", 3) if (used < 3) used = 3 从位置0写入数据,指针有可能会移动
Similar to memcpy(& buff[0], "123", 3) if (used < 3) used = 3 writes data from position 0, the pointer may move
类似于memcpy(&buff[2], [0x1a,0x30,0x31,0x32,0x00,0x01], 6) if (used < (2+6)) used = (2+6)从位置2开始，按数值写入多个字节数据
Similar to memcpy(& buff[2], [0x1a,0x 30,0x 31,0x 32,0x 00,0x 01], 6) if (used < (2 6)) used = (2 6) starts from position 2 and writes multiple bytes of data by value
类似于memcpy(&buff[9], &buff2[0], buff2的used) if (used < (9+buff2的used)) used = (9+buff2的used) 从位置9开始，合并入buff2里0~used的内容
Similar to memcpy(& buff[9], & buff2[0], buff2 used) if (used < (9 buff2 used)) used = (9 buff2 used) Starting from position 9, merge the contents of 0 ~ used in buff2
类似于memcpy(&buff[used], "123", 3) used+= 3 从buff开始写入数据,指针相应地往后移动
Similar to memcpy(& buff[used], "123", 3) used = 3 writes data from buff, and the pointer moves back accordingly
类型
Type
结束坐标点与最上边的距离，范围是0~高度
The distance between the end coordinate point and the top, ranging from 0 to height
结束坐标点与最左边的距离，范围是0~宽度
The distance between the end coordinate point and the leftmost point, ranging from 0 to width
自动申请(如存在psram则在psram进行申请,如不存在或失败则在sram进行申请
automatic application (apply in psram if it exists, apply in sram if it does not exist or fails
获取zbuff对象的长度（与当前指针位置无关；执行后指针位置不变
Get the length of the zbuff object (regardless of the current pointer position; the pointer position remains unchanged after execution
获取zbuff里最后一个数据位置指针到首地址的偏移量，来表示zbuff内已有有效数据量大小，注意这个不同于分配的空间大小，由于seek()会改变最后一个数据位置指针，因此也会影响到used()返回值。
Obtain the offset from the last data position pointer in zbuff to the first address to indicate the amount of valid data in zbuff. Note that this is different from the allocated space size. Since seek() will change the last data position pointer, it will also affect the return value of used().
设置buff对象的FrameBuffer属性（与当前指针位置无关；执行后指针位置不变
Set the FrameBuffer property of the buff object (regardless of the current pointer position; the pointer position does not change after execution
设置光标位置（可能与当前指针位置有关；执行后指针会被设置到指定位置
Set the cursor position (may be related to the current pointer position; the pointer will be set to the specified position after execution
设置光标后从buff开头计算起的光标的位置
Position of the cursor calculated from the beginning of the buff after setting the cursor
设置成功会返回
Successful settings will return
设置或获取FrameBuffer某个像素点的颜色（与当前指针位置无关；执行后指针位置不变
Set or get the color of a FrameBuffer pixel (regardless of the current pointer position; The pointer position remains unchanged after execution
设置颜色时，设置成功会返回true；读取颜色时，返回颜色的值，读取失败返回
When the color is set, true will be returned if the color is set successfully; When the color is read, the value of the color is returned, and the value of the color is returned if the reading fails.
该位置的数据
Data for this location
读出来的数据
Read out the data
读取buff中的字节数
Read the number of bytes in the buff
读取一个指定类型的数据（从当前指针位置开始；执行后指针会向后移动
Read data of a specified type (starting from the current pointer position; the pointer will move backward after execution
读取开头的五个字节数据
Read the first five bytes of data
读取的数据，如果越界则为
Data read, if out of bounds
读取结果
Read Results
读数据（从当前指针位置开始；执行后指针会向后移动
Read data (starting from the current pointer position; the pointer will move backward after execution
调整zbuff实际分配空间的大小，类似于realloc的效果，new = realloc(old, n)，可以扩大或者缩小（如果缩小后len小于了used，那么used=新
Adjust the size of zbuff's actual allocated space, similar to the effect of realloc, new = realloc(old, n), which can be expanded or reduced (if len is less than used after reduction, then used = new
起始位置start, 默认0，如果<0则从used往前数，比如 -1 那么
Start position, default 0, if <0, count forward from used, such as -1
起始坐标点与最上边的距离，范围是0~高度
The distance between the starting coordinate point and the top edge, ranging from 0 to height
起始坐标点与最左边的距离，范围是0~宽度
The distance between the starting coordinate point and the leftmost point, ranging from 0 to width
返回值
Return Value
返回值类型|解释
return value type | explanation
释放zbuff所申请内存 注意：gc时会自动释放zbuff以及zbuff所申请内存，所以通常无需调用此函数，调用前请确认您已清楚此函数用处！调用此函数并不会释放掉zbuff，仅会释放掉zbuff所申请的内存，zbuff需等gc时自动释放
Release the memory applied by zbuff Note: gc will automatically release zbuff and the memory applied by zbuff, so it is usually not necessary to call this function. Please make sure you know the use of this function before calling! Calling this function will not release zbuff, but will only release the memory applied by zbuff. zbuff will automatically release it when gc
长度del_len，默认为used，如果start + del_len数值大于used，会强制调整
The length del_len. The default value is used. If the value of the start del_len is greater than used, the value is forced to be adjusted.
颜色，如果留空则表示获取该位置的颜色
Color, if left blank to get the color of the location
默认大小端
Default Size End