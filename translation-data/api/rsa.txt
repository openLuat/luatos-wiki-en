本库有专属demo，[点此链接查看rsa的demo例子
This library has its own demo,[click this link to view the demo example of rsa
本页文档由[这个文件](https://gitee.com/openLuat/LuatOS/tree/master/luat/../components/rsa/binding/luat_lib_rsa.c)自动生成。如有错误，请提交issue或帮忙修改后pr，谢谢
This page document is automatically generated by [this file](https://gitee.com/openLuat/LuatOS/tree/master/luat/../components/rsa/binding/luat_lib_rsa.c). If there is any error, please submit issue or help modify pr, thank you
参数
Parameters
成功返回sig数据, 否则返回
Returns the sig data successfully, otherwise
传入值类型|解释
Incoming Value Type | Explanation
打印结果
Print Results
待加密数据, 不能超过公钥位数的一半, 例如 2048bit的公钥, 只能加密128字节的数据
The data to be encrypted cannot exceed half of the number of bits of the public key. For example, a 2048-bit public key can only encrypt 128 bytes of data.
待解密数据
Data to be decoded
读取私钥, 然后解码数据
Read the private key and then decode the data
返回值
Return Value
返回值类型|解释
return value type | explanation
公钥数据,仅支持PEM格式
Public key data, only PEM format is supported
公钥用于 解密 和 验签, 一般可公开,放在设备端
The public key is used for decryption and signature verification. Generally, it can be made public and placed on the device.
加密
Encryption
加密成功后的数据,若失败会返回
The data after the encryption is successful, if it fails, it will be returned.
加密解密
encryption and decryption
解密
Decryption
解密成功后的数据,若失败会返回
The decrypted data. If the decrypted data fails, the data is returned.
例子
Examples
签名
Signature
签名模式, 例如
Signature patterns, such
签名通常很慢, 通常是服务器做
Signing is usually slow and is usually done by the server.
请在电脑上生成私钥和公钥, 当前最高支持4096bit, 一般来说2048bit就够用了
Please generate the private key and public key on the computer. Currently, the maximum support is 4096bit. Generally speaking, 2048bit is enough.
示例
Example
是待解密的数据
is the data to be decoded
是私钥, public.pem 是公钥
is the private key and public.pem is the public key
数据, 如果是HEX字符串,记得fromHex转二进制数据
Data, if it is a HEX string, remember to convert fromHex to binary data.
私钥的密码,可选
Password for the private key, optional
私钥密码, 可选
Private key password, optional
私钥数据,仅支持PEM格式
Private key data. Only PEM format is supported.
私钥用于 加密 和 签名, 通常保密, 放在服务器端
The private key is used for encryption and signing, is usually kept secret, and is placed on the server side.
为了演示API使用, 这里把私钥也放在设备上
To demonstrate the use of the API, the private key is also placed on the device here.
下面代码中的 "abc" 是待加密数据
"abc" in the following code is the data to be encrypted
下面是解密, 通常不会在设备端进行, 这里主要是演示用法, 会很慢
The following is decryption, usually not on the device side, here is mainly to demonstrate the usage, will be very slow
演示签名和验签
Demo Signature and Verification
验签
Check and sign
验签是很快的
The check is very fast.
已适配
Adapted
有效返回true,否则为false,出错返回
Valid return true, otherwise false, error return
注意, 解密通常很慢, 建议在服务器端进行
Note that decryption is usually slow and recommended on the server side