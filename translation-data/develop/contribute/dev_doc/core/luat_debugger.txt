本文档描述 LuatOS 调试器相关的信息, 主要用于lua脚本的单步调试
This document describes the LuatOS debugger-related information, mainly used for single-step debugging of lua scripts.
补充说明
Supplementary Notes
程序已暂停
Program suspended
程序已暂停,通常附带一个event事件,例如
The program is paused, usually with an event, such
程序在运行,正在执行`next`或者`step`操作, 下一状态通常为
The program is running and is executing the `next` or `step` operation. The next state is usually
程序在运行,正在执行`stepIn`操作, 下一状态通常为
The program is running and is performing the `stepIn` operation. The next state is usually
程序在运行,正在执行`stepOut`操作, 下一状态通常为
The program is running and is performing the `stepOut` operation. The next state is usually
程序在运行,直至遇到断点
The program is running until it encounters a breakpoint.
串口/USB <--> LuaTools. LuaTools负责解析模块的输出数据,分离出里面的调试数据, 发送到调试器, 并接收调试器的命令, 转换为模块能识别的格式,写入串口
Serial/USB <-> LuaTools. LuaTools is responsible for parsing the output data of the module, separating the debugging data inside, sending it to the debugger, receiving the debugger's commands, converting it to a format recognized by the module, and writing it to the serial port.
串口/USB/UART, 模块与调试器的通信方式
Serial port/USB/UART, communication mode between module and debugger
从简化通信的方式看, 调试器也能通过串口/USB与模块进行通信, 无需
In terms of simplified communication, the debugger can also communicate with the module via serial/USB without the need
代理调试器与模块之间的通信形式
Form of communication between the proxy debugger and the module
当前协议版本
Current Protocol Version
的 head, 为英文逗号分隔的字符串,仅为英文字母或数字
is a comma-separated string of only English letters or numbers.
的具体行为等价于协议代理, 屏蔽不同硬件设备接口通信方式的差异, 模块与调试器之间, 走的是LuatOS 调试协议
The specific behavior is equivalent to the protocol agent, masking the differences in the way different hardware device interfaces communicate, between the module and the debugger, walking the LuatOS debugging protocol.
等待调试器
Wait for Debugger
等待调试器连接,程序在等待
Waiting for debugger connection, program waiting
等待指定秒数后,依然没有收到`start`命令, 自动退出等待, 状态恢复到0, 调试模式关闭
After waiting for the specified number of seconds, the` start` command is still not received, the waiting is automatically exited, the status is restored to 0, and the debugging mode is closed.
调试模式关闭,程序在运行
Debug mode off, program running
调试器
Debugger
调试器 <--> vscode. 两者通信的渠道到标准输入输出,格式是
Debugger <--> vscode. The two communication channels to the standard input and output, the format is
调试器, 跑在vscode内的独立程序
Debugger, run standalone program inside vscode
调试器,本文内基本等同于Lua脚本调试器, 执行单步调试,上下变量查看与设置,堆栈查询等等
Debugger, this article is basically equivalent to Lua script debugger, single-step debugging, up and down variable viewing and setting, stack query, etc.
调试器. 两者通信的渠道是Socket或IPC,通常是socket, 使用的协议为LuatOS 调试器协议
Debugger. The communication channel between the two is Socket or IPC, usually socket, and the protocol used is LuatOS debugger protocol.
调试协议
Commissioning Protocol
调试状态变化, 前者为原状态, 后者为更新后的状态
Debugging state changes, the former is the original state, the latter is the updated state
基本通信方式(输出
Basic communication method (output
基本通信方式(输入
Basic communication method (input
基本信息
Basic information
鉴于适配器读取串口的实现难度,及rda8910会走的AP日志通道, 选择LuaTools是比较合理的方式
In view of the difficulty of the adapter to read the serial port, and the AP log channel that the rda8910 will go through, the choice of LuaTools is a more reasonable way.
类及可执行的命令参数
Class and executable command parameters
模块 <--> 串口/USB. 模块的对外通信渠道, 与windows/linux/macos下的进程调试不一样. 但依然可以抽象为
Module <-> serial port/USB. The external communication channel of the module is different from the process debugging under windows/linux/macos, but it can still be abstracted
模块 <--USB--> LuaTools <--Socket--> 调试器 <--标准输入输出
Module <-- USB --> LuaTools <-- Socket --> Debugger <-- Standard Input Output
模块, 具体执行LuatOS和脚本
module, which specifically executes LuatOS and scripts
其中
Among them
起草日期
Date of drafting
设计的软硬件实体
Designed hardware and software entities
设计人员
Designer
是命令
It's an order
术语表
Glossary of Terms
通常,在lua脚本内加入 `dbg.wait(300)` 语句后, luatos就会停在该语句,等待调试器的命令
Usually, after adding the `dbg.wait(300)`statement to the lua script, luatos will stop at the statement and wait for the debugger`s command.
通信流程
Communication process
微软主导的一个调试适配协议, 主要用于
A debug adaptation protocol led by Microsoft, mainly used
为不同的字符串参数
for different string parameters
为字符串, 按`head` 的不同, 含义会有差异
For a string, the meaning will be different according to the `head`
相互间的通信联系
Mutual communication links
响应类
Response Class
协议的输出, 以 `[head] exts` 形式,按行进行输出
The output of the protocol, in the form of `[head] exts`, is output by row
协议的输入, 以 `cmd arg1 arg2 ...` 形式,按行进行输入, 一般为命令
The input of the protocol, in the form of `cmd arg1 arg2 ...`, is entered by line, generally as a command.
与此同时, `[state,changed,X,3]` 应该会一起到来
Meanwhile, `[state,changed,X,3]` should come together
遇到断点,或者执行调试指令后(`step/stepIn/stepOut`)后,遇到符合条件的情况,触发暂停
When a breakpoint is encountered or the debugging instruction (`step/stepIn/stepOut`) is executed, the pause is triggered when the condition is met.
远期来看, 调试器与设备直接通信是最佳体验
In the long run, direct communication between the debugger and the device is the best experience.
整体展示
Overall display
执行调试器,与其进行通信, 展示调试界面
Execute the debugger, communicate with it, show the debug interface
状态变更输出
Status Change Output
